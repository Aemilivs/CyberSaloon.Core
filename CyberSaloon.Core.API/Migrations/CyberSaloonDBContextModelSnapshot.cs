// <auto-generated />
using System;
using CyberSaloon.Core.Repo.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CyberSaloon.Core.API.Migrations
{
    [DbContext(typeof(CyberSaloonDBContext))]
    partial class CyberSaloonDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicantApplication", b =>
                {
                    b.Property<Guid>("SupportedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupportersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupportedId", "SupportersId");

                    b.HasIndex("SupportersId");

                    b.ToTable("ApplicantApplication");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Applicants.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Applications.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ArtId")
                        .IsUnique()
                        .HasFilter("[ArtId] IS NOT NULL");

                    b.HasIndex("ArtistId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Applications.ApplicationIngestLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeightDelta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationIngestLogs");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Artists.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Arts.Art", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Arts");
                });

            modelBuilder.Entity("ApplicantApplication", b =>
                {
                    b.HasOne("CyberSaloon.Core.Repo.Applications.Application", null)
                        .WithMany()
                        .HasForeignKey("SupportedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberSaloon.Core.Repo.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("SupportersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Applications.Application", b =>
                {
                    b.HasOne("CyberSaloon.Core.Repo.Applicants.Applicant", "Applicant")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberSaloon.Core.Repo.Arts.Art", "Art")
                        .WithOne("Application")
                        .HasForeignKey("CyberSaloon.Core.Repo.Applications.Application", "ArtId");

                    b.HasOne("CyberSaloon.Core.Repo.Artists.Artist", "Artist")
                        .WithMany("Applications")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Art");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Applications.ApplicationIngestLog", b =>
                {
                    b.HasOne("CyberSaloon.Core.Repo.Applicants.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId");

                    b.HasOne("CyberSaloon.Core.Repo.Applications.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Applicant");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Applicants.Applicant", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Artists.Artist", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("CyberSaloon.Core.Repo.Arts.Art", b =>
                {
                    b.Navigation("Application")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
